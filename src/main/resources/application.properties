spring.datasource.hikari.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.hikari.jdbc-url=jdbc:log4jdbc:mysql://localhost:3306/bootboard?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Seoul
spring.datasource.hikari.username=boot
spring.datasource.hikari.password=boot1234
spring.datasource.hikari.connection-test-query=SELECT 1
#테이블 컬럼명과 자바 클래스 필드 매핑시 각각 snake표기법(understore표기법)과 camel표기법으로 되어있더라도 매핑 처리
mybatis.configuration.map-underscore-to-camel-case=true
#input type을 hidden으로 하고 name을 _method로 지정시 전송 방식을 지정 가능 하도록 하는 선언
#없어도 실행 가능(낮은 버전에서는 필수)
spring.mvc.hiddenmethod.filter.enabled=true
#JPA를 사용하기 위한 데이터베이스 종류 선언
spring.jpa.database=mysql
#데이터베이스 엔진 설정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#JPA Entity(객체, 테이블)의 연관관계를 고려하여 테이블 생성과 같은 DDL 처리를 자동으로 할건지 여부
#spring.jpa.generate-ddl=true 로 지정시 옵션들
#	spring.jpa.hibernate.ddl-auto = 옵션
#		1. none : 아무 작업도 하지 않음
#		2. create-drop : SessionFactory가 시작될때 생성을 시작하고 SessionFactory가 종료될 때 drop(테스트시 사용)
#		3. create : SessionFactory가 시작시 데이터베이스를 drop하고 생성된 DDL을 실행
#		4. update : 스키마에서 변경된 부분만 반영
#		5. validate : 스키마에서 변경된 사항이 있으면 변경된 내용을 출력하고 application을 종료
spring.jpa.generate-ddl=true
#hibernate의 새로운 id 생성 옵션의 사용 여부
spring.jpa.hibernate.use-new-id-generator-mappings=false




